@startuml

!include <C4/C4_Component>

title Диаграмма компонентов

Person(user,"Пользователь", "Пользователь системы")

Container(clientApp, "Клиентское приложение", "Mobile/Web", "Интерфейс пользователя")
Container(apiGateway, "API Gateway", "Nginx", "Маршрутизация и аутентификация")

System_Boundary("SmartHouseSystem", "Микросервисы и базы данных") {
    Container(kafka, "Kafka", "Apache Kafka", "Шина данных")
    Container_Boundary(auth, "Авторизация") {
        Container(authService, "Сервис авторизации", "Java", "Аутентификация и авторизация") {
            Component(AuthRepo, "Auth Repository", "Компонент работы с данными")
            Component(AuthDomain, "Auth Domain", "Бизнес логика")
        }
        ContainerDb(userDb, "БД пользователей", "PostgreSQL", "Данные пользователей")
    }
    Container_Boundary(heating, "Управление отоплением") {
        Container(heatingService, "Сервис управления отоплением", "Java", "Управление отоплением") {
            Component(HeatingRepo, "Heating Repository", "Компонент работы с данными")
            Component(HeatingDomain, "Heating Domain", "Бизнес логика")
            Component(HeatingDeviceManager, "Device Manager", "Компонент управления девайсами")
        }
        ContainerDb(heatingDb, "БД отопления", "PostgreSQL", "Настройки отопления")
    }

    Container_Boundary(telemetry, "Телеметрия") {
        Container(telemetryService, "Сервис мониторинга температуры", "Python", "Мониторинг температуры") {
            Component(TelemetryRepo, "Telemetry Repository", "Компонент работы с данными")
            Component(TelemetryDomain, "Telemetry Domain", "Бизнес логика")
            Component(TelemetryDeviceManager, "Device Manager", "Компонент управления девайсами")
        }
        ContainerDb(telemetryDb, "БД температуры", "PostgreSQL", "Телеметрические данные")
    }

    Container_Boundary(lighting, "Управление освещением") {
        Container(lightingService, "Сервис управления освещением", "Python", "Управление освещением") {
            Component(LightingRepo, "Lighting Repository", "Компонент работы с данными")
            Component(LightingDomain, "Lighting Domain", "Бизнес логика")
            Component(LightingDeviceManager, "Device Manager", "Компонент управления девайсами")
        }
        ContainerDb(lightingDb, "БД освещения", "PostgreSQL", "Настройки освещения")
    }

    Container_Boundary(access, "Управление доступом") {
        Container(accessService, "Сервис управления воротами", "Python", "Контроль доступа") {
            Component(AccessRepo, "Access Repository", "Компонент работы с данными")
            Component(AccessDomain, "Access Domain", "Бизнес логика")
            Component(AccessDeviceManager, "Device Manager", "Компонент управления девайсами")
        }
        ContainerDb(accessDb, "БД ворот", "PostgreSQL", "Данные контроля доступа")
    }

    Container_Boundary(surveillance, "Управление наблюдением") {
        Container(surveillanceService, "Сервис управления наблюдением", "Python", "Наблюдение") {
            Component(SurveillanceRepo, "Surveillance Repository", "Компонент работы с данными")
            Component(SurveillanceDomain, "Surveillance Domain", "Бизнес логика")
            Component(SurveillanceDeviceManager, "Device Manager", "Компонент управления девайсами")
        }
        ContainerDb(surveillanceDb, "БД наблюдения", "PostgreSQL", "Конфигурации камер и записи")
    }

}

Container_Ext(heatingDevices, "Устройства отопления")
Container_Ext(tempSensors, "Датчики температуры")
Container_Ext(lightingDevices, "Устройства освещения")
Container_Ext(accessDevices, "Ворота")
Container_Ext(cameras, "Камеры видеонаблюдения")

Rel(user, clientApp, "Использует")
Rel(clientApp, apiGateway, "Отправляет запросы", "HTTPS")

Rel(apiGateway, authService, "Маршрутизирует для аутентификации", "HTTPS")
Rel(apiGateway, heatingService, "Маршрутизирует", "HTTPS")
Rel(apiGateway, tempService, "Маршрутизирует", "HTTPS")
Rel(apiGateway, lightingService, "Маршрутизирует", "HTTPS")
Rel(apiGateway, accessService, "Маршрутизирует", "HTTPS")
Rel(apiGateway, surveillanceService, "Маршрутизирует", "HTTPS")

Rel(authService, userDb, "Читает и пишет", "SQL")
Rel(tempService, telemetryDb, "Читает и пишет", "SQL")
Rel(heatingService, heatingDb, "Читает и пишет", "SQL")
Rel(lightingService, lightingDb, "Читает и пишет", "SQL")
Rel(accessService, accessDb, "Читает и пишет", "SQL")
Rel(surveillanceService, surveillanceDb, "Читает и пишет", "SQL")

Rel(heatingService, kafka, "Публикует и подписывается на события", "JSON")
Rel(tempService, kafka, "Публикует данные", "JSON")
Rel(lightingService, kafka, "Публикует и подписывается на события", "JSON")
Rel(accessService, kafka, "Публикует и подписывается на события", "JSON")
Rel(surveillanceService, kafka, "Публикует и подписывается на события", "JSON")

Rel(heatingService, heatingDevices, "Обменивается данными", "HTTP")
Rel(tempService, tempSensors, "Собирает данные", "HTTP")
Rel(lightingService, lightingDevices, "Обменивается данными", "HTTP")
Rel(accessService, accessDevices, "Обменивается данными", "HTTP")
Rel(surveillanceService, cameras, "Обменивается данными", "RTSP")

@enduml
